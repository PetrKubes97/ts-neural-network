!function(t){var e={};function n(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(i,s,function(e){return t[e]}.bind(null,s));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);class i{constructor(t,e,n,i,s,r=!1){this.x=t,this.y=e,this.activation=n,this.name=i,this.isBias=r,this.id=s}}const s={output:t=>1/(1+Math.exp(-t)),der:t=>{let e=s.output(t);return e*(1-e)}};var r;!function(t){t[t.L1=0]="L1",t[t.L2=1]="L2",t[t.NONE=2]="NONE"}(r||(r={}));const a={cost:t=>t.reduce((t,e)=>t+e.reduce((t,e)=>t+Math.abs(e.getWeight()),0),0)*(1/h(t)),der:(t,e)=>1/e*(t>0?1:-1)},o={cost:t=>.5*t.reduce((t,e)=>t+e.reduce((t,e)=>t+Math.pow(e.getWeight(),2),0),0)*(1/h(t)),der:(t,e)=>t*(1/e)};class u{constructor(t,e){this.input=t,this.output=e}}const h=t=>t.reduce((t,e)=>t+e.length,0);class c{constructor(t,e=!1){this.inputs=[],this.outputs=[],this.isInput=!1,this.isCalculated=!1,this.isBias=!1,this.name=t,this.isBias=e}getName(){return this.name}getIsBias(){return this.isBias}setAsInputNeuron(t){this.isInput=!0,this.activation=t,this.inputs=null}setInput(t){if(!this.isInput)throw"Cannot set activation of non-input neuron";this.activation=t}setSigma(t){this.sigma=t}addInput(t){this.inputs.push(t)}getInputs(){return this.inputs}addOutput(t){this.outputs.push(t)}getOutputs(){return this.outputs}setOutputs(t){this.outputs=t}setInputs(t){this.inputs=t}resetInputs(){this.inputs=[]}resetOutputs(){this.outputs=[]}reset(){this.isCalculated=!1}getActivation(){return this.isBias&&(this.activation=1),this.activation}getSigma(){return this.sigma}calculateActivation(){return this.isInput||this.isCalculated||this.isBias||(this.activation=s.output(this.inputs.reduce((t,e)=>t+e.calculateValue(),0)),this.isCalculated=!0),this.getActivation()}}class l{constructor(t,e){this.weight=10*Math.random()-5,this.sampleWeightChanges=[],this.inputNeuron=t,this.outputNeuron=e}addSampleWeightChange(t){this.sampleWeightChanges.push(t)}applyAverageWeightChange(){const t=this.sampleWeightChanges.reduce((t,e)=>t+e,0)/this.sampleWeightChanges.length;this.weight+=t,this.sampleWeightChanges=[]}getWeight(){return this.weight}calculateValue(){return this.weight*this.inputNeuron.calculateActivation()}getOutputNeuron(){return this.outputNeuron}getInputNeuron(){return this.inputNeuron}}window.slide=((t,e)=>{m[t]=e,g.evaluate(m),d.draw(g.getNeurons(),g.getConnections())}),window.addOrRemoveLayer=(t=>{g.addOrRemoveLayer(t),M()}),window.addOrRemoveNeuron=((t,e)=>{g.addOrRemoveNeuron(t,e),0==e&&(t?m.push(1):m.pop()),M()}),window.train=(t=>{let e=t?Number.parseInt(v.value):1;switch(g.setRate(Number.parseFloat(w.value)),I.value){case"L1":g.setRegularizationType(r.L1);break;case"L2":g.setRegularizationType(r.L2);break;case"none":g.setRegularizationType(r.NONE)}g.setRegularizationRate(Number.parseFloat(C.value)),O.checked&&null==T?(x.innerText="Stop",T=setInterval(()=>{p(e)},100)):null!=T?(clearInterval(T),T=null,x.innerText="Start"):p(e)});const p=t=>{for(let e=0;e<t;e++)g.train();M()};let g,d,m;window.setTrainingData=(()=>{try{const t=JSON.parse(L.value);g.setTrainingSamples([]),t.forEach(t=>{g.addTrainingSet(t[0],t[1])}),g.reset(),M()}catch(t){alert(t)}}),window.reset=(()=>{g.reset(),M()}),window.applyTrainingSample=(t=>{m=g.getTrainingSamples()[t].input,M()}),window.onload=(()=>{R()});let y,f,N,S,b,w,v,I,C,O,x,E,z,L,T=null,$=[3];const R=()=>{N=document.getElementById("content"),f=document.getElementById("input-controls"),y=document.getElementById("layer-controls"),b=document.getElementById("iter-output"),S=document.getElementById("cost"),w=document.getElementById("rate-input"),v=document.getElementById("iters-input"),I=document.getElementById("regularization-type-input"),C=document.getElementById("regularization-rate-input"),z=document.getElementById("training-set-data-output"),E=document.getElementById("training-set-neurons-output"),L=document.getElementById("training-set-input"),O=document.getElementById("train-repeat-chckbx"),x=document.getElementById("train-btn"),d=new class{constructor(t){this.content=t,this.ctx=t.getContext("2d"),this.height=t.height,this.width=t.width}draw(t,e){this.ctx.clearRect(0,0,this.width,this.height),this.drawableNeurons=[],this.drawableInputNeurons=[];const n=this.width/(t.length+1);t.forEach((e,s)=>{const r=this.height/(e.length+2);if(e.forEach((t,e)=>{const a=new i(n*(1+s),r*(1+e),t.getActivation(),t.getName(),e);this.drawableNeurons.push(a),0===s&&this.drawableInputNeurons.push(a)}),s!=t.length-1){const e=n*(1+s),a=r*(1+t[s].length),o=new i(e,a,1,`bias${s}`,t[s].length,!0);this.drawableNeurons.push(o)}});const s=new Map;this.drawableNeurons.forEach(t=>s.set(t.name,t)),e.forEach((t,e)=>{t.forEach(t=>{const n=t.getInputNeuron().getIsBias()?`bias${e}`:t.getInputNeuron().getName();this.drawConnection(s.get(n),s.get(t.getOutputNeuron().getName()),t.getWeight())})}),this.drawableNeurons.forEach(t=>{this.drawNeuron(t)})}drawNeuron(t){this.ctx.beginPath(),this.ctx.arc(t.x,t.y,25,0,2*Math.PI),this.ctx.fillStyle="rgb(255,255,255)",this.ctx.fill(),this.ctx.beginPath(),t.isBias?this.ctx.fillStyle="rgba(46,40,42, 1)":this.ctx.fillStyle=`rgba(61, 232, 255, ${t.activation})`,this.ctx.strokeStyle="rgb(46,40,42, 1)",this.ctx.lineWidth=1,this.ctx.arc(t.x,t.y,25,0,2*Math.PI),this.ctx.fill(),this.ctx.stroke(),this.ctx.fillStyle="rgb(46,40,42, 1)",this.ctx.font="bold 16px serif";const e=Number(t.activation).toFixed(2);this.ctx.fillText(e,t.x-this.ctx.measureText(e).width/2,t.y+16/3)}drawConnection(t,e,n){this.ctx.beginPath(),this.ctx.lineWidth=Math.log(1.001+Math.abs(n)),this.ctx.strokeStyle=n>0?"rgba(61, 232, 255, 1)":"rgba(205, 83, 52, 1)",this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.closePath(),this.ctx.stroke()}getDrawableInputNeurons(){return this.drawableInputNeurons}}(N),B()},B=()=>{(g=new class{constructor(t,e,n){this.iterCnt=0,this.rate=1,this.lambda=.001,this.regType=r.NONE,this.biasNeuron=new c("bias",!0),this.neurons=[],this.connections=[],this.trainSamples=[],this.inputSize=t,this.hiddenLayerSizes=e,this.outputSize=n,this.layerCnt=e.length+2,this.neurons=[],this.connections=[],this.init()}init(){for(let t=0;t<this.layerCnt;t++){let e=0;switch(t){case 0:e=this.inputSize;break;case this.hiddenLayerSizes.length+1:e=this.outputSize;break;default:e=this.hiddenLayerSizes[t-1]}this.neurons[t]=[];for(let n=0;n<e;n++)this.neurons[t][n]=new c(`Neuron${t}${n}`),0==t&&this.neurons[t][n].setAsInputNeuron(0)}this.createConnections(0,this.layerCnt-1)}evaluate(t){if(t.length!=this.inputSize)throw"Input size does not match";return this.neurons.forEach(t=>{t.forEach(t=>t.reset())}),this.neurons[0].forEach((e,n)=>{e.setInput(t[n])}),this.neurons[this.layerCnt-1].forEach(t=>{t.calculateActivation()}),this.neurons[this.layerCnt-1].map(t=>t.getActivation())}addTrainingSet(t,e){if(t.length!=this.inputSize)throw"Input size does not match";if(e.length!=this.outputSize)throw"Output size does not match";this.trainSamples.push(new u(t,e))}getCost(){if(0==this.trainSamples.length)return 0;const t=this.trainSamples.reduce((t,e)=>(this.evaluate(e.input),t+this.neurons[this.layerCnt-1].reduce((t,n,i)=>t+Math.pow(n.getActivation()-e.output[i],2),0)),0);let e=0;switch(this.regType){case r.L1:e=a.cost(this.connections);break;case r.L2:e=o.cost(this.connections);break;case r.NONE:e=0}return.5*t*(1/this.trainSamples.length)+this.lambda*e}train(){this.trainSamples.forEach(t=>{this.evaluate(t.input),this.neurons[this.layerCnt-1].forEach((e,n)=>{const i=(t.output[n]-e.getActivation())*s.der(e.getActivation());e.setSigma(i)});for(let t=this.layerCnt-2;t>=0;t--)this.neurons[t].forEach(t=>{const e=t.getOutputs().reduce((t,e)=>t+e.getOutputNeuron().getSigma()*e.getWeight(),0)*s.der(t.getActivation());t.setSigma(e)});this.connections.forEach(t=>{t.forEach(t=>{let e=0;switch(this.regType){case r.L1:e=a.der(t.getWeight(),h(this.connections));break;case r.L2:e=o.der(t.getWeight(),h(this.connections));break;case r.NONE:e=0}const n=t.getOutputNeuron().getSigma()*t.getInputNeuron().getActivation()*this.rate-this.lambda*e;t.addSampleWeightChange(n)})})}),this.connections.forEach(t=>{t.forEach(t=>{t.applyAverageWeightChange()})}),this.iterCnt++}addOrRemoveLayer(t){if(t){const t=3;this.hiddenLayerSizes.push(t),this.layerCnt++,this.createLayerOfNeurons(this.layerCnt-2,t),this.createLayerOfNeurons(this.layerCnt-1,this.outputSize),this.createConnections(this.layerCnt-3,this.layerCnt-1)}else{if(2==this.layerCnt)return;this.hiddenLayerSizes.pop(),this.layerCnt--,this.neurons.pop(),this.connections.pop(),this.createLayerOfNeurons(this.layerCnt-1,this.outputSize),this.createConnections(this.layerCnt-2,this.layerCnt-1)}}addOrRemoveNeuron(t,e){const n=0==e,i=e==this.layerCnt-1,s=!n&&!i,r=t?1:-1;if(s?this.hiddenLayerSizes[e-1]+=r:n?(this.inputSize+=r,this.trainSamples=[]):(this.outputSize+=r,this.trainSamples=[]),t){let t;t=s?this.hiddenLayerSizes[e-1]-1:n?this.inputSize-1:this.outputSize-1;const r=new c(`Neuron${e}${t}`);if(this.neurons[e][t]=r,n&&r.setAsInputNeuron(0),!n){this.neurons[e-1].forEach(t=>{const n=new l(t,r);t.addOutput(n),r.addInput(n),this.connections[e-1].push(n)});const t=new l(this.biasNeuron,r);r.addInput(t),this.connections[e-1].push(t)}i||this.neurons[e+1].forEach(t=>{const n=new l(r,t);t.addInput(n),this.connections[e].push(n)})}else{const t=this.neurons[e].pop();n||this.neurons[e-1].forEach(e=>{e.setOutputs(e.getOutputs().filter(e=>e.getOutputNeuron().getName()!=t.getName()))}),i||this.neurons[e+1].forEach(e=>{e.setInputs(e.getInputs().filter(e=>e.getInputNeuron().getName()!=t.getName()))}),n||(this.connections[e-1]=this.connections[e-1].filter(e=>e.getOutputNeuron().getName()!=t.getName())),i||(this.connections[e]=this.connections[e].filter(e=>e.getInputNeuron().getName()!=t.getName()))}}reset(){this.iterCnt=0,this.createConnections(0,this.layerCnt-1)}createLayerOfNeurons(t,e){this.neurons[t]=[];for(let n=0;n<e;n++)this.neurons[t][n]=new c(`Neuron${t}${n}`)}createConnections(t,e){for(let n=t;n<e;n++)this.connections[n]=[],this.neurons[n+1].forEach(t=>{t.resetInputs()}),this.neurons[n].forEach(t=>{t.resetOutputs()}),this.neurons[n+1].forEach(t=>{this.neurons[n].forEach(e=>{const i=new l(e,t);e.addOutput(i),t.addInput(i),this.connections[n].push(i)});const e=new l(this.biasNeuron,t);t.addInput(e),this.connections[n].push(e)})}getNeurons(){return this.neurons}getConnections(){return this.connections}getInputSize(){return this.inputSize}getOutputSize(){return this.outputSize}getLayerCnt(){return this.layerCnt}getHiddenLayerSizes(){return this.hiddenLayerSizes}setRate(t){this.rate=t}getIteration(){return this.iterCnt}setRegularizationType(t){this.regType=t}setRegularizationRate(t){this.lambda=t}getTrainingSamples(){return this.trainSamples}setTrainingSamples(t){this.trainSamples=t}}(2,$,1)).addTrainingSet([1,1],[0]),g.addTrainingSet([1,0],[1]),g.addTrainingSet([0,1],[1]),g.addTrainingSet([0,0],[0]),(m=new Array(g.getInputSize())).fill(1),g.evaluate(m),M()},M=()=>{g.evaluate(m),d.draw(g.getNeurons(),g.getConnections());let t=A("Layers",g.getLayerCnt().toString(),"addOrRemoveLayer(true)","addOrRemoveLayer(false)");t+=A("Input size",g.getInputSize().toString(),"addOrRemoveNeuron(true, 0)","addOrRemoveNeuron(false, 0)");for(let e=0;e<g.getLayerCnt()-2;e++)t+=A("Hidden layer size",g.getHiddenLayerSizes()[e].toString(),`addOrRemoveNeuron(true, ${e+1})`,`addOrRemoveNeuron(false, ${e+1})`);t+=A("Output size",g.getOutputSize().toString(),`addOrRemoveNeuron(true, ${g.getLayerCnt()-1})`,`addOrRemoveNeuron(false, ${g.getLayerCnt()-1})`),y.innerHTML=t,f.innerHTML="",d.getDrawableInputNeurons()||d.draw(g.getNeurons(),g.getConnections());d.getDrawableInputNeurons().forEach(t=>{const e=t.x-50,n=t.y-25+5;f.innerHTML+=`<input\n      style="position: absolute; top: ${n}px; left: ${e}px; height: 50px;" \n      type="range" orient="vertical" min="0" max="1" value="${t.activation}" step="0.05" \n      oninput="slide(${t.id}, this.value);">`}),b.innerHTML=g.getIteration().toString(),S.innerHTML=g.getCost().toString();let e="";for(let t=0;t<g.getInputSize();t++)e+=`<th scope='col'>Input ${t}</th>`;for(let t=0;t<g.getOutputSize();t++)e+=`<th scope='col' style="text-align: right">Output ${t}</th>`;E.innerHTML=e;let n="";g.getTrainingSamples().forEach((t,e)=>{n+=`<tr style="cursor:pointer;" onclick="applyTrainingSample(${e})">`,t.input.forEach(t=>{n+=`<td>${t}</td>`}),t.output.forEach(t=>{n+=`<td style="text-align: right">${t}</td>`}),n+="</tr>"}),z.innerHTML=n},A=(t,e,n,i)=>`<tr><td align='right'><label>${t}:</label><b style="margin: auto 6px">${e}</b></td><td>\n  <div class="btn-group" role="group">\n    <button type="button" class="btn btn-secondary btn-sm" onclick="${i}">-</button>\n    <button type="button" class="btn btn-secondary btn-sm" onclick="${n}">+</button>\n  </div></td></tr>`}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,